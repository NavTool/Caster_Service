name: Build on Multi Linux platforms

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - version: ubuntu-20.04-amd64
            platform: linux/amd64
            dockerfile: ci/docker/dockerfile.debian
            docker_img: ubuntu:20.04
          - version: ubuntu-18.04-amd64
            platform: linux/amd64
            dockerfile: ci/docker/dockerfile.debian
            docker_img: ubuntu:18.04
          - version: ubuntu-20.04-arm64
            platform: linux/arm64
            dockerfile: ci/docker/dockerfile.debian
            docker_img: ubuntu:20.04
          - version: openeuler-22.03-amd64
            platform: linux/amd64
            dockerfile: ci/docker/dockerfile.rhel
            docker_img: openeuler/openeuler:22.03
          - version: openeuler-22.03-arm64
            platform: linux/arm64
            dockerfile: ci/docker/dockerfile.rhel
            docker_img: openeuler/openeuler:22.03
          # - version: centos-7.6.1810-amd64
          #   platform: linux/amd64
          #   dockerfile: ci/docker/dockerfile.rhel.aliyun
          #   docker_img: centos:centos8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          fetch-depth: 0
          fetch-tags: true  # 获取所有的 Git 标签
          submodules: true  # 拉取子模块

      # - uses: actions/checkout@v4
      #   with:
      #     repository: NavTool/base_third_relys
      #     path: rely
      #     submodules: true  # 拉取子模块


      - name: Set up QEMU for multi-platform support
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag build-image-${{ matrix.version }}\
            --build-arg BASE_IMAGE=${{ matrix.docker_img }} \
            -f ${{ matrix.dockerfile }} \
            --load .

      - name: Create container and run container
        run: |
          docker run --name build-container-${{ matrix.version }} -d build-image-${{ matrix.version }}
               
      - name: Run build script inside container
        run: |
          docker exec build-container-${{ matrix.version }} mkdir workspace
          docker cp . build-container-${{ matrix.version }}:/workspace
          docker exec -w /workspace build-container-${{ matrix.version }} git config --global --add safe.directory /workspace
          docker exec -w /workspace build-container-${{ matrix.version }} chmod +x ci/build_in_linux.sh
          docker exec -w /workspace build-container-${{ matrix.version }} ci/build_in_linux.sh
        

      - name: Copy artifacts from container
        run: |
          docker cp build-container-${{ matrix.version }}:/workspace/bin ./output
          docker stop build-container-${{ matrix.version }}   # 删除容器  
          docker rm build-container-${{ matrix.version }}   # 删除容器

      - name: Get tag version
        id: tag_version
        run: echo "::set-output name=tag_version::$(git describe --tags --dirty=-dev)"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: Caster_Service-${{ steps.tag_version.outputs.tag_version }}-${{ matrix.version }}
          path: ./output


